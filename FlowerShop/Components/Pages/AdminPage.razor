@attribute [Authorize(Roles = "admin")]
@rendermode InteractiveServer
@inject AppDbContext _context
@inject UserDbContext _userContext
@using BlazorBootstrap
@using FlowerShop.Core
@using Microsoft.AspNetCore.Components.QuickGrid
@using FlowerShop.Data
@using Microsoft.EntityFrameworkCore
@page "/admin"

<h2>Цветы</h2>
<QuickGrid Items="@_context.Flowers">
    <PropertyColumn Property="@(flower => flower.Name)" Sortable="true" Title="Название"/>
    <PropertyColumn Property="@(flower => flower.Price)" Sortable="true" Title="Цена"/>
    <TemplateColumn Title="Изменить">
        <button class="btn btn-primary" @onclick="@(() => ChangeModel(context))">Изменить</button>
    </TemplateColumn>
    <TemplateColumn Title="Удалить">
        <button class="btn btn-primary" @onclick="@(() => DeleteModel(context))">Удалить</button>
    </TemplateColumn>
</QuickGrid>

<h2>Упаковки</h2>
<QuickGrid Items="@_context.Packs">
    <PropertyColumn Property="@(flower => flower.Name)" Sortable="true" Title="Название"/>
    <PropertyColumn Property="@(flower => flower.Price)" Sortable="true" Title="Цена"/>
    <TemplateColumn Title="Изменить">
        <button class="btn btn-primary" @onclick="@(() => ChangeModel(context))">Изменить</button>
    </TemplateColumn>
    <TemplateColumn Title="Удалить">
        <button class="btn btn-primary" @onclick="@(() => DeleteModel(context))">Удалить</button>
    </TemplateColumn>
</QuickGrid>

<h2>Игрушки</h2>
<QuickGrid Items="@_context.Toys">
    <PropertyColumn Property="@(flower => flower.Name)" Sortable="true" Title="Название"/>
    <PropertyColumn Property="@(flower => flower.Price)" Sortable="true" Title="Цена"/>
    <TemplateColumn Title="Изменить">
        <button class="btn btn-primary" @onclick="@(() => ChangeModel(context))">Изменить</button>
    </TemplateColumn>
    <TemplateColumn Title="Удалить">
        <button class="btn btn-primary" @onclick="@(() => DeleteModel(context))">Удалить</button>
    </TemplateColumn>
</QuickGrid>

<Modal @ref="changeModal" title="Изменить" UseStaticBackdrop="true" CloseOnEscape="true">
    <BodyTemplate>
        <input type="text" @bind-value="_name" class="form-control dark-theme-textbox" autocomplete="off" placeholder="Название">

        <input type="text" @bind-value="_price" class="form-control dark-theme-textbox" autocomplete="off" placeholder="Цена" style="margin-top: 5px;">

        <InputFile OnChange="@HandleFileSelected" accept=".jpg,.png" style="margin-top: 5px;"/>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnChange">Изменить</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="addModel" title="Добавить" UseStaticBackdrop="true" CloseOnEscape="true">
    <BodyTemplate>
        <input type="text" @bind-value="_newNameFlower" class="form-control dark-theme-textbox" autocomplete="off" placeholder="Название">
        
        <input type="text" @bind-value="_newPrice" class="form-control dark-theme-textbox" autocomplete="off" placeholder="Цена" style="margin-top: 5px;">

        <select @bind="_model">
            <option>-</option>
            <option value="flower">Цветок</option>
            <option value="toy">Игрушка</option>
            <option value="pack">Упаковка</option>
        </select>
        
        <InputFile OnChange="@HandleFileSelected" accept=".jpg,.png" style="margin-top: 5px;"/>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="AddModel">Добавить</Button>
    </FooterTemplate>
</Modal>

<button class="btn btn-primary" @onclick="CreateFlower">Добавить</button>

<QuickGrid Items="@_userContext.Users" Style="margin-top: 10px;">
    <PropertyColumn Property="@(user => user.Email)" Sortable="true" Title="Почта"/>
    <PropertyColumn Property="@(user => user.Balance)" Sortable="true" Title="Баланс"/>
    <PropertyColumn Property="@(user => user.FirstName)" Sortable="true" Title="Имя"/>
    <PropertyColumn Property="@(user => user.LastName)" Sortable="true" Title="Фамилия"/>
    <TemplateColumn Title="Добавить баланс">
        <button class="btn btn-primary" @onclick="@(() => ShowChangeBalance(context))">Изменить</button>
    </TemplateColumn>
</QuickGrid>

<Modal @ref="userModal" title="Изменить баланс пользователю" UseStaticBackdrop="true" CloseOnEscape="true">
    <BodyTemplate>
        <input type="text" @bind-value="_balance" class="form-control dark-theme-textbox" autocomplete="off" 
               placeholder="Баланс" style="margin-top: 5px;">
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="ChangeBalance">Изменить</Button>
    </FooterTemplate>
</Modal>

@code {
    protected IQueryable<Flower>? itemsQueryable;

    protected IQueryable<User>? _usersQueryable;

    private Modal changeModal = default!;
    
    private Modal addModel = default!;
    
    private Modal userModal = default!;

    private User selectedUser;

    private double _price;

    private double _newPrice;
    
    private string _image;
    
    private string _name;

    private string _newNameFlower;

    private string _newImage;
    
    private IEntity selectedEntity;

    private bool _isFlower = true;
    
    private bool _isToy = false;
    
    private bool _isPack = false;

    private string _model;

    private double _balance;

    private async Task OnChange()
    {
        await Task.Run(() =>
        {
            // todo проверка на Null and empty string 
            selectedEntity.Name = _name;
            if (!string.IsNullOrEmpty(_image))
                selectedEntity.Image = _image;
            selectedEntity.Price = _price;

            if (selectedEntity.GetType() == typeof(Flower))
            {
                _context.Flowers.Update(selectedEntity as Flower);
            }
            else if (selectedEntity.GetType() == typeof(Toy))
            {
                _context.Toys.Update(selectedEntity as Toy);
            }
            else if (selectedEntity.GetType() == typeof(Pack))
            {
                _context.Packs.Update(selectedEntity as Pack);
            }
            
            _context.SaveChangesAsync();
        });
        await changeModal.HideAsync();
    }

    private async Task ChangeModel<T>(T model) where T : IEntity
    {
        selectedEntity = model;
        _name = selectedEntity.Name;
        _price = selectedEntity.Price;
        await changeModal.ShowAsync();
    }

    private async void CreateFlower(MouseEventArgs obj)
    {
        await addModel.ShowAsync();
    }
   
    private async Task AddModel()
    {
        await Task.Run(() =>
        {
            if (_model == "flower")
            {
                Flower flower = new()
                {
                    Id = Guid.NewGuid(),
                    Name = _newNameFlower,
                    Image = _newImage,
                    Price = _newPrice
                };
                _context.Flowers.AddAsync(flower);    
            }
            else if (_model == "pack")
            {
                Pack pack = new()
                {
                    Id = Guid.NewGuid(),
                    Name = _newNameFlower,
                    Image = _newImage,
                    Price = _newPrice
                };
                _context.Packs.AddAsync(pack);    
            }
            else if (_model == "toy")
            {
                Toy toy = new()
                {
                    Id = Guid.NewGuid(),
                    Name = _newNameFlower,
                    Image = _newImage,
                    Price = _newPrice
                };
                _context.Toys.AddAsync(toy);
            }
            
            _context.SaveChangesAsync();
        });
        await addModel.HideAsync();
    }

    private void DeleteModel<T>(T model) where T : IEntity
    {
        if (model.GetType() == typeof(Flower))
        {
            _context.Flowers.Remove(model as Flower);    
        }
        if (model.GetType() == typeof(Pack))
        {
            _context.Packs.Remove(model as Pack);
        }
        if (model.GetType() == typeof(Toy))
        {
            _context.Toys.Remove(model as Toy);
        }
        
        _context.SaveChanges();
    }

    private async void HandleFileSelected(InputFileChangeEventArgs obj)
    {
        var buffer = new byte[obj.File.Size];
        using (var ms = new MemoryStream(buffer))
        {
            await obj.File.OpenReadStream(202428800).CopyToAsync(ms);
            _image = Convert.ToBase64String(buffer);
            _newImage = Convert.ToBase64String(buffer);
        }
    }

    private async Task ChangeBalance()
    {
        var findUser = _userContext.Users.FirstOrDefault(x => x.Id == selectedUser.Id);
        findUser.Balance = _balance;
        _userContext.Users.Update(findUser);
        await _context.SaveChangesAsync();
        await userModal.HideAsync();
    }

    private async void ShowChangeBalance(User user)
    {
        selectedUser = user;

        await userModal.ShowAsync();
    }
}